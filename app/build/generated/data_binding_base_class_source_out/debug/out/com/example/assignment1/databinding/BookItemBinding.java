// Generated by view binder compiler. Do not edit!
package com.example.assignment1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.assignment1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BookItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView bookAuthor;

  @NonNull
  public final TextView bookName;

  @NonNull
  public final TextView bookPrice;

  @NonNull
  public final TextView bookPrice1;

  @NonNull
  public final TextView bookRating;

  @NonNull
  public final TextView bookYear;

  @NonNull
  public final Button editBookButton;

  @NonNull
  public final RatingBar ratingBar;

  private BookItemBinding(@NonNull CardView rootView, @NonNull TextView bookAuthor,
      @NonNull TextView bookName, @NonNull TextView bookPrice, @NonNull TextView bookPrice1,
      @NonNull TextView bookRating, @NonNull TextView bookYear, @NonNull Button editBookButton,
      @NonNull RatingBar ratingBar) {
    this.rootView = rootView;
    this.bookAuthor = bookAuthor;
    this.bookName = bookName;
    this.bookPrice = bookPrice;
    this.bookPrice1 = bookPrice1;
    this.bookRating = bookRating;
    this.bookYear = bookYear;
    this.editBookButton = editBookButton;
    this.ratingBar = ratingBar;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static BookItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BookItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.book_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BookItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.book_author;
      TextView bookAuthor = ViewBindings.findChildViewById(rootView, id);
      if (bookAuthor == null) {
        break missingId;
      }

      id = R.id.book_name;
      TextView bookName = ViewBindings.findChildViewById(rootView, id);
      if (bookName == null) {
        break missingId;
      }

      id = R.id.book_price;
      TextView bookPrice = ViewBindings.findChildViewById(rootView, id);
      if (bookPrice == null) {
        break missingId;
      }

      id = R.id.book_price_;
      TextView bookPrice1 = ViewBindings.findChildViewById(rootView, id);
      if (bookPrice1 == null) {
        break missingId;
      }

      id = R.id.book_rating;
      TextView bookRating = ViewBindings.findChildViewById(rootView, id);
      if (bookRating == null) {
        break missingId;
      }

      id = R.id.book_year;
      TextView bookYear = ViewBindings.findChildViewById(rootView, id);
      if (bookYear == null) {
        break missingId;
      }

      id = R.id.editBookButton;
      Button editBookButton = ViewBindings.findChildViewById(rootView, id);
      if (editBookButton == null) {
        break missingId;
      }

      id = R.id.ratingBar;
      RatingBar ratingBar = ViewBindings.findChildViewById(rootView, id);
      if (ratingBar == null) {
        break missingId;
      }

      return new BookItemBinding((CardView) rootView, bookAuthor, bookName, bookPrice, bookPrice1,
          bookRating, bookYear, editBookButton, ratingBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
